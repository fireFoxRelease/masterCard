#ifndef __PUBLIC_H_
#define __PUBLIC_H_
/*++

Module Name:

    public.h

Abstract:

    This module contains the common declarations shared by driver
    and user applications.

Environment:

    user and kernel

--*/

//
// Define an Interface Guid so that app can find the device and talk to it.
//

// {74C21996-D2F0-4DDC-9E3A-A6F3B85A813A}
DEFINE_GUID( GUID_DEVINTERFACE_MasterCard ,
	0x74c21996, 0xd2f0, 0x4ddc, 0x9e, 0x3a, 0xa6, 0xf3, 0xb8, 0x5a, 0x81, 0x3a);


#define IOCTL_IN_BUFFERED CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)//the least value is 0x800
#define IOCTL_OUT_BUFFERED CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_READ_PADDRESS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_WRITE_OFFSETADDRESS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_GET_DEVICE_IDENTIFICATION CTL_CODE(FILE_DEVICE_UNKNOWN, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_MAP_TX_DMA_BUFFER CTL_CODE(FILE_DEVICE_UNKNOWN, 0x805, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_MAP_RX_DMA_BUFFER CTL_CODE(FILE_DEVICE_UNKNOWN, 0x806, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_QUERY_INTERRUPT CTL_CODE(FILE_DEVICE_UNKNOWN, 0x807, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_WRITE_BAR CTL_CODE(FILE_DEVICE_UNKNOWN, 0x808, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_READ_BAR CTL_CODE(FILE_DEVICE_UNKNOWN, 0x809, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_RELEASE_TX_POINTER CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80a, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_RELEASE_RX_POINTER CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80b, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_GET_BAR_POINTER CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80c, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_RELEASE_BAR_POINTER CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80d, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_IOCTL_QUEUE_WRITE_OFFSET CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80e, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_IOCTL_SET_WRITE_OFFSET CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80f, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_IOCTL_READ_REGISTER0 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x810, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_IOCTL_READ_REGISTER1 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x811, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_IOCTL_WRITE_REGISTER0 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x812, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_IOCTL_WRITE_REGISTER2 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x813, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SET_EVENT CTL_CODE(FILE_DEVICE_UNKNOWN, 0x814, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_MAP_WRITE_BUFFER CTL_CODE(FILE_DEVICE_UNKNOWN, 0x815, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_MAP_READ_BUFFER CTL_CODE(FILE_DEVICE_UNKNOWN, 0x816, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_RELEASE_WRITE_POINTER CTL_CODE(FILE_DEVICE_UNKNOWN, 0x817, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_RELEASE_READ_POINTER CTL_CODE(FILE_DEVICE_UNKNOWN, 0x818, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_CLEAR_EVENT CTL_CODE(FILE_DEVICE_UNKNOWN, 0x819, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_TEST CTL_CODE(FILE_DEVICE_UNKNOWN, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)

typedef struct _PCI_DEVICE_LOCATION {
	unsigned int					bus;
	unsigned short					function;
	unsigned short					device;
} PCI_DEVICE_LOCATION, *PPCI_DEVICE_LOCATION;

typedef struct _master_DEVICE_IDENTIFIER
{
	struct _master_DEVICE_IDENTIFIER*	next;
	char*							    name;
	unsigned int						index;
	PCI_DEVICE_LOCATION					location;
} Master_DEVICE_IDENTIFIER, *PMaster_DEVICE_IDENTIFIER;

typedef struct _BAR_DESCRIPTOR
{
	unsigned char*		virAddress;
	unsigned long       phyAddress;
	unsigned long		size;
	unsigned char		flag;
}BAR_DESCRIPTOR, *PBAR_DESCRIPTOR;

typedef struct _IO_MEMORY
{
	BAR_DESCRIPTOR bar[6];
}IO_MEMORY, *PIO_MEMORY;


typedef struct _DMA_BUFFER_ITEM
{
	void*		        virAddress;
	unsigned long		length;
	unsigned long		phyAddress;
	unsigned long		phyAddressH;
	unsigned long		busAddress;
}DMA_BUFFER_ITEM, *PRT_BUFFER_ITEM;

typedef struct _REGISTER_DATA
{
	unsigned int		index;
	unsigned int		data;
	unsigned int		offset;
	unsigned int		length;
}REGISTER_DATA_ITEM, *PREGISTER_DATA_ITEM;

#endif